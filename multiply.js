const multiply = (t, e) => { let n = 0; const r = processingNum(t), l = r.num; n += r.floatLength; const c = processingNum(e), o = c.num; n += c.floatLength; const s = String(BigInt(l) * BigInt(o)); if ("0" === s) return s; if (0 === n) return s; const g = s.length, u = cutEndZero(s), i = g - u.length, h = u.padStart(n + 1, "0") + "0".repeat(i), a = injectDote(h, n); let f = cutEndZero(a); return "." === f.slice(-1) && (f = f.slice(0, -1)), cutStartZero(f) }, getBiggerFloatLength = (t, e) => { const n = t.split(".")[1], r = n ? cutEndZero(n).length : 0, l = e.split(".")[1]; return r + (l ? cutEndZero(l).length : 0) }, processingNum = t => { const e = t.indexOf("."); let n = 0, r = t; if (-1 !== e) { const l = cutEndZero(t); n = l.length - e - 1, r = l.replace(".", "") } return (0 === r.length || 1 === r.length && "-" === r[0]) && (r += 0), { num: r, floatLength: n } }, cutEndZero = t => { let e = t.length; for (let n = e - 1; n >= 0 && "0" === t[n]; n -= 1)e = n; return t.slice(0, e) }, cutStartZero = t => { const e = t.length; let n = 0; for (let r = 0; r < e && (n = r, "0" === t[r]); r += 1); return n = "." === t[n] ? 0 : n, t.slice(n) }, injectDote = (t, e) => { const n = t.length - e; return t.slice(0, n) + "." + t.slice(n) };

module.exports.multiply = multiply